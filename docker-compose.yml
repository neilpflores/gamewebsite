services:
  db:
    image: mysql:8.0
    environment:
      # Sets environment variables for the database configuration
      - MYSQL_DATABASE=appdb # Specifies the name of the database
      - MYSQL_PASSWORD=pass123 # Sets the password for the MySQL user
      - MYSQL_ROOT_PASSWORD=pass123 # Sets the root password for MySQL
    networks:
      - sqlNetwork
    ports:
      - 3307:3306 # Maps the container's port 3306 to the host's port 3307
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./database:/tmp/database
    command: mysqld --init-file="/tmp/database/schema.sql"

  api:
    # Defines the 'api' service for the backend API
    build:
      # Builds the backend API using the provided Dockerfile
      context: ./server # Specifies the build context directory for the backend
      dockerfile: Dockerfile # Specifies the Dockerfile to use for building the backend
    ports:
      - 3000:3000 # Maps the container's port 3000 to the host's port 3000
    networks:
      - sqlNetwork
    depends_on:
      db:
        condition: service_healthy # Specifies that the 'api' service depends on the 'db' service being healthy

  client:
    # Defines the 'frontend' service for the frontend app
    restart: on-failure # Restarts the container if it fails
    build:
      # Builds the frontend app using the provided Dockerfile
      context: ./client # Specifies the build context directory for the frontend
    ports:
      - 3001:3000 # Maps the container's port 3000 to the host's port 3001
    networks:
      - sqlNetwork # Connects the service to the 'sqlNetwork' network
    depends_on:
      - api # Specifies that the 'frontend' service depends on the 'api' service

networks:
  sqlNetwork:
    # Defines the network
    driver: bridge # Specifies the network driver as 'bridge'
